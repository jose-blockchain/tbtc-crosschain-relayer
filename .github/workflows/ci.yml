name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      # This step forces Git to download dependencies using `https://` protocol,
      # even if `yarn.json` refers to some package via `git://`. Using `git://`
      # is no longer supported by GH. One of the dashboard dependencies by
      # default uses `git://` and we needed to manually remove it every time
      # it re-appeared in the lock file. Now even if it does re-appear, the
      # `yarn install --frozen-lockfile` will not fail.
      - name: Force HTTPS for git protocol
        run: |
          git config --global url."https://".insteadOf git://

      - name: Install dependencies
        run: |
          echo "yarn version:"
          yarn --version
          echo "node version:"
          node --version
          yarn install --frozen-lockfile --ignore-optional

      # TODO: Enable those after fixing the linting errors

      # - name: Lint
      # run: yarn lint

      # - name: Format check
      # run: yarn format

      - name: Detect unused dependencies
        run: yarn depcheck

      - name: Build
        run: yarn build

      - name: Setup .env file
        run: cp env.example .env

      - name: Start Docker Compose services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build

      - name: Wait for services to become healthy
        run: .github/scripts/wait-for-healthy-services.sh
        shell: bash

      - name: Validate configuration
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm tbtc-relayer-dev yarn run validate-config

      - name: Reset database
        run: npx prisma migrate reset --force --skip-seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tbtc_relayer?schema=public

      - name: Run tests
        run: yarn test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tbtc_relayer?schema=public

      - name: Stop Docker Compose services
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
