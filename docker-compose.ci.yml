services:
  postgres:
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tbtc_relayer

  tbtc-relayer-dev:
    environment:
      NODE_ENV: development
      API_ONLY_MODE: true
      VERBOSE_APP: true

      # Application configuration
      APP_NAME: "tBTC Relayer (CI)"
      APP_VERSION: "1.0.0-ci"
      HOST_PORT: 4000
      APP_PORT: 3000
      
      # Supported chains for CI
      SUPPORTED_CHAINS: "sepoliaTestnet,solanaDevnet,starknetTestnet,suiTestnet,arbitrumMainnet,baseMainnet,baseSepoliaTestnet,solanaDevnetImported"

      # Database configuration
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tbtc_relayer
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/tbtc_relayer

      # Mock private keys for CI validation (safe test values)
      CHAIN_SEPOLIATESTNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_ARBITRUMMAINNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_BASEMAINNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_BASESEPOLIATESTNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_SOLANADEVNET_PRIVATE_KEY: "5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"
      CHAIN_STARKNETTESTNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_SUITESTNET_PRIVATE_KEY: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
      CHAIN_SOLANADEVNETIMPORTED_SOLANA_PRIVATE_KEY: "5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"

      # Mock RPC URLs for CI validation
      ETHEREUM_MAINNET_RPC: "https://mock-ethereum-mainnet.test.com"
      CHAIN_SOLANADEVNETIMPORTED_L2_RPC: "https://mock-solana-devnet.test.com"
      CHAIN_SOLANADEVNETIMPORTED_L2_WS_RPC: "wss://mock-solana-devnet-ws.test.com"

    ports:
      - "3000:3000"

    build:
      target: development
    command: node dist/index.js
    volumes: [] # Avoid volumes from the base docker-compose.yml
    
    # Ensure the service waits for postgres to be healthy
    depends_on:
      postgres:
        condition: service_healthy
    
    # Add healthcheck to monitor if the service is running properly
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "3", "--max-time", "5", "http://localhost:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
